generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                        String              @id @default(uuid())
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  email                     String              @unique
  lastName                  String
  role                      UserRole?
  firstName                 String
  profileImage              String?
  dob                       DateTime?
  phoneNumber               String?
  stripeCustomerId          String?
  stripeSubscriptionId      String?
  currentLocation           Json?
  stripeSubscriptionPlan    SubscriptionPlan?
  stripeSubscriptionStatus  SubscriptionStatus?
  documentsUrl              String[]
  notificationsEmailEnabled Boolean             @default(true)
  stripeConnectId           String?             @default("")
  firstTransactionId        String?             @default("")
  stripeSubEndingDate       DateTime?
  secondTransactionId       String?
  bookings                  Booking[]
  Chat                      Chat[]
  mechanic                  Mechanic?
  Message                   Message[]
  chatMessages              Message[]           @relation("UserMessages")
  pushSubscriptions         PushSubscription[]
  reviews                   Review[]
  serviceRequests           ServiceRequest[]
  Vehicle                   Vehicle[]
}

model Mechanic {
  id                  String            @id @default(uuid())
  userId              String            @unique
  bio                 String?
  rating              Float?
  bannerImage         String?
  driversLicenseId    String?
  merchantDocumentUrl String?
  availability        Json?
  isAvailable         Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  location            Json?
  serviceArea         Json?
  servicesOffered     ServiceType[]
  isApproved          Boolean           @default(false)
  bookings            Booking[]
  Chat                Chat[]
  user                User              @relation(fields: [userId], references: [id])
  services            MechanicService[]
  ServiceOffer        ServiceOffer[]
  serviceRequests     ServiceRequest[]
}

model Vehicle {
  id           String  @id @default(uuid())
  make         String
  model        String
  year         Int
  licensePlate String?
  userId       String
  User         User    @relation(fields: [userId], references: [id])
}

model ServiceRequest {
  id                  String         @id
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  clientId            String
  mechanicId          String?
  status              ServiceStatus
  location            Json
  description         String?
  paymentHoldId       String?
  paymentId           String?
  arrivalCode         String?
  completionTime      DateTime?
  startTime           DateTime?
  serviceType         ServiceType    @default(DIAGNOSTIC)
  completionCode      String?
  mechanicLocation    Json?
  totalAmount         Float
  firstTransactionId  String?
  secondTransactionId String?
  extraService        Boolean?
  review              Review?
  offers              ServiceOffer[]
  client              User           @relation(fields: [clientId], references: [id])
  mechanic            Mechanic?      @relation(fields: [mechanicId], references: [id])
}

model Review {
  id               String         @id @default(uuid())
  serviceRequestId String         @unique
  clientId         String
  rating           Int
  comment          String?
  createdAt        DateTime       @default(now())
  client           User           @relation(fields: [clientId], references: [id])
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
}

model Chat {
  id         Int       @id @default(autoincrement())
  customerId String
  mechanicId String
  user       User      @relation(fields: [customerId], references: [id])
  mechanic   Mechanic  @relation(fields: [mechanicId], references: [userId])
  messages   Message[]

  @@unique([customerId, mechanicId])
}

model Message {
  id       Int    @id @default(autoincrement())
  chatId   Int
  authorId String
  content  String
  userId   String
  author   User   @relation(fields: [authorId], references: [id])
  chat     Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user     User   @relation("UserMessages", fields: [userId], references: [id])
}

model Lead {
  id          String    @id @default(uuid())
  name        String?
  email       String
  phone       String?
  message     String?
  createdAt   DateTime  @default(now())
  responded   Boolean   @default(false)
  respondedAt DateTime?
}

model PushSubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  user      User     @relation(fields: [userId], references: [id])
}

model Service {
  id          String            @id @default(cuid())
  type        ServiceType
  name        String
  description String
  price       Float
  duration    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  mechanics   MechanicService[]
}

model MechanicService {
  id         String   @id @default(cuid())
  mechanicId String
  serviceId  String
  price      Float
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id])
  service    Service  @relation(fields: [serviceId], references: [id])

  @@unique([mechanicId, serviceId])
}

model Booking {
  id             String        @id @default(cuid())
  customerId     String
  mechanicId     String
  scheduledStart DateTime
  scheduledEnd   DateTime
  status         BookingStatus @default(PENDING)
  totalPrice     Float
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  serviceType    ServiceType?
  location       Json?
  customer       User          @relation(fields: [customerId], references: [id])
  mechanic       Mechanic      @relation(fields: [mechanicId], references: [id])
}

model ServiceOffer {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  mechanicId       String
  serviceRequestId String
  price            Float
  note             String?
  status           OfferStatus    @default(PENDING)
  expiresAt        DateTime?
  location         Json
  mechanic         Mechanic       @relation(fields: [mechanicId], references: [id])
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id])
}

enum UserRole {
  Customer
  Mechanic
  Admin
}

enum ServiceStatus {
  REQUESTED
  ACCEPTED
  PAYMENT_AUTHORIZED
  IN_ROUTE
  SERVICING
  IN_PROGRESS
  COMPLETED
  IN_COMPLETION
  BOOKED
}

enum SubscriptionPlan {
  BASIC
  PREMIUM
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum ServiceType {
  OIL_CHANGE
  BRAKE_REPAIR
  TIRE_SERVICE
  ENGINE_REPAIR
  DIAGNOSTIC
  BATTERY_SERVICE
  AC_SERVICE
  GENERAL_MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  BOOKED
  IN_ROUTE
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REJECTED
  BOOKED
}
